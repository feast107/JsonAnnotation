using System;
using Feast.JsonAnnotation.Structs;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Feast.JsonAnnotation.Structs.Code;

namespace Feast.JsonAnnotation.Extensions
{
    internal static class StringFormatExtension
    {
        internal static string Repeat(this string src, int time)
        {
            var ret = new StringBuilder();
            while (time > 0)
            {
                ret.Append(src);
                time--;
            }
            return ret.ToString();
        }
        internal static string FormatModifier(this ClassDeclarationSyntax node) => 
            node.Modifiers.Aggregate(new StringBuilder(), (current, modifier) => current.Append(modifier.Text + ' ')).ToString();
        internal static string FormatClassName(this ClassDeclarationSyntax node) => 
            $"{node.FormatModifier()}class {node.GetSelfClassName()}";
        internal static string FormatClassesString(this IEnumerable<ClassTree> trees,int tabCount = 0)
        {
            var ret = new StringBuilder();
            foreach (var tree in trees)
            {
                ret.Append(tree.FullString(tabCount));
            }
            return ret.ToString();
        }
        internal static string FormatNamespaceString(this string nameSpace, HashSet<ClassDeclarationSyntax> classes)
        {
            List<ClassTree> roots = new();
            classes.ForEach(z =>
            {
                var clazz = new ClassTree() { Node = z };
                if (!roots.Any(root => root.TryAppendChild(clazz)))
                {
                    roots.Add(clazz);
                }
            });
            return $"namespace { nameSpace }{{\n{roots.FormatClassesString().InsertTab(1)}}}";
        }
        internal static Dictionary<string,string> FormatNamespaceStrings<T>(this Dictionary<string, FileScope<T>> namespaces)
        {
            return namespaces.ToDictionary(k => k.Key, v =>
            {
                var sb = new StringBuilder();
                sb.Append($"// <auto-generated/>\n" +
                          $"using System;\n" +
                          $"\n");
                v.Value.UsingClass.ForEach(pair =>
                {
                    sb.Append(pair.Key.FormatNamespaceString(pair.Value) + '\n');
                });
                return sb.ToString();
            });
        }
        internal static string InsertTab(this string code,int count = 1)
        {
            var tab = "\t".Repeat(count);
            return tab + code.Replace("\n", $"\n{tab}");
        }

        internal static string ToCodeString(this string str)
        {
            if (str.Length == 0) return str;
            var head = str[0];
            return head is >= 'A' and <= 'Z' ? $"{(char)(head + 32)}{str.Substring(1)}" : str;
        }
        internal static string ToCodeString(this CodeRegion.AccessModifier modifer) => modifer.ToString().ToCodeString();
        internal static string ToCodeString(this CodeRegion.ExtraModifier modifer) => modifer.ToString().ToCodeString();

        internal static string WithBlank<T>(this List<T> source, int count = 1)
        {
            var sb = new StringBuilder();
            source.ForEach(x => sb.Append(x + " ".Repeat(count)));
            return sb.ToString();
        }
        internal static string WithBlank<T>(this List<T> source, Func<T,string> formatProvider, int count = 1)
        {
            var sb = new StringBuilder();
            source.ForEach(x => sb.Append(formatProvider(x) + " ".Repeat(count)));
            return sb.ToString();
        }

        internal static StringBuilder AppendLineWithTab(this StringBuilder builder, string content, int tab = 0) =>
            builder.AppendLine($"{"\t".Repeat(tab)}{content}");
        internal static StringBuilder AppendMultipleLineWithTab(this StringBuilder builder, string content, int tab = 0)
        {
            var contents = content.Split('\n').SkipWhile(x => x.Equals("\t"));
            var tabs = "\t".Repeat(tab);
            contents.ForEach(c =>
            {
                builder.AppendLine($"{tabs}{c}");
            });
            return builder;
        }
    }
}
