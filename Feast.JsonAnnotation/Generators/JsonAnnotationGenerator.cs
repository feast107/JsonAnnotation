using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Feast.JsonAnnotation.Extensions;
using Feast.JsonAnnotation.Structs;
using Microsoft.CodeAnalysis;

namespace Feast.JsonAnnotation.Generators
{
    [Generator]
    internal class JsonAnnotationGenerator : ISourceGenerator
    {
        private readonly JsonAnnotationReceiver receiver = new();
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => receiver);
        }

        public void Execute(GeneratorExecutionContext context)
        {
            Debugger.Launch();
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            receiver.ClassUsing.TypeUsing.ForEach(x =>
            {
                x.Value.UsingClass.ForEach(c =>
                {
                    var ns = c.Key.FormatNamespaceString(c.Value);
                });
            });

            // Build up the source code
            string source = $@"// <auto-generated/>
using System;

{receiver.ClassUsing.TypeUsing.Values.ToList().Select(x =>
    x.UsingClass.Select(c =>
    $@"namespace {c.Key} {{
            {c.Value.Select(n =>
             $@" {n.Modifiers.Select(m => m.Text).SpaceBetween()} {n.GetClassName()}{{}}
                ").NewLine()}
        }}"
        ).NewLine()
    )}
";

            // Add the source code to the compilation
            context.AddSource($"model.g.cs", source);
        }
    }
}
